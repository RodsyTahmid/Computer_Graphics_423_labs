from OpenGL.GL import *
from OpenGL.GLUT import *

#drawing last 2 digit of any student ID

digit = {
    0: [[200, 200, 201, 300], [150, 299, 201, 300],
        [149, 199, 150, 299], [149, 199, 200, 200]],
    1: [[200, 200, 201, 300]],
    2: [[200, 250, 201, 300], [150, 299, 201, 300],
        [149, 199, 150, 250], [149, 199, 200, 200],
        [149, 250, 200, 251]],
    3: [[150, 299, 201, 300], [149, 250, 200, 251],
        [149, 199, 200, 200], [201, 300, 200, 200]],
    4: [[150, 299, 149, 250], [149, 250, 200, 251],
        [201, 300, 200, 200]],
    5: [[200, 200, 201, 250], [150, 299, 201, 300],
        [149, 250, 150, 299], [149, 199, 200, 200],
        [149, 250, 200, 251]],
    6: [[200, 200, 201, 250], [150, 299, 201, 300],
        [149, 199, 150, 299], [149, 199, 200, 200],
        [149, 250, 200, 251]],
    7: [[200, 200, 201, 300], [150, 299, 201, 300]],
    8: [[200, 200, 201, 300], [150, 299, 201, 300],
        [149, 199, 150, 299], [149, 199, 200, 200],
        [149, 250, 200, 251]],
    9: [[200, 200, 201, 300], [150, 299, 201, 300],
        [149, 250, 150, 299], [149, 199, 200, 200],
        [149, 250, 200, 251]],
}
def draw_points(x, y):
    glPointSize(5) #pixel size. by default 1 thake
    glBegin(GL_POINTS)
    glVertex2f(x,y) #jekhane show korbe pixel
    glEnd()
def FindZone(x1, y1, x2, y2): #Finding the Original Zone
    dx = x2 - x1
    dy = y2 - y1
    Zone = 0
    if abs(dx) >= abs(dy):
        if dx > 0 and dy > 0:
            Zone = 0
        # write conditions for other zones
        elif dx < 0 and dy > 0:
            Zone = 3
        elif dx < 0 and dy < 0:
            Zone = 4
        elif dx > 0 and dy < 0:
            Zone = 7
    else:
        if dx > 0 and dy > 0:
            Zone = 1
        # write conditions for other zones
        elif dx < 0 and dy > 0:
            Zone = 2
        elif dx < 0 and dy < 0:
            Zone = 5
        elif dx > 0 and dy < 0:
            Zone = 6
    return Zone
def Zone_Original(Zone, X, Y): #original zone #zone-2
    if Zone == 0:
        draw_points(X, Y)
    elif Zone == 1:
        draw_points(Y, X)
    elif Zone == 2:
        draw_points(-Y, X)
    elif Zone == 3:
        draw_points(-X, Y)
    elif Zone == 4:
        draw_points(-X, -Y)
    elif Zone == 5:
        draw_points(-Y, -X)
    elif Zone == 6:
        draw_points(Y, -X)
    elif Zone == 7:
        draw_points(X, -Y)
def DrawLine(Zone, x1, y1, x2, y2): # drawing line using midpoint Algo
    dx = x2 - x1
    dy = y2 - y1

    d = 2 * dy - dx
    incE = 2 * dy
    incNE = 2 * (dy - dx)

    y = y1
    for x in range (x1, x2 +1, 1):
        Zone_Original(Zone, x, y)
        if d > 0: # next pixel : NE
            d = d + incNE
            y = y + 1
        else:
            d = d + incE # next pixel : E

def Convert_To_Zero(Zone, X, Y):  # Converting original zone to zone-0
    if Zone == 0:
        return X, Y
    elif Zone == 1:
        return Y, X
    elif Zone == 2:
        return Y, -X
    elif Zone == 3:
        return -X, Y
    elif Zone == 4:
        return -X, -Y
    elif Zone == 5:
        return -Y, -X
    elif Zone == 6:
        return -Y, X
    elif Zone == 7:
        return X, -Y

def Convert_Back(Zone, X, Y): #Converting back to original zone #zone-0 to zone-2
    if Zone == 0:
        return X, Y
    elif Zone == 1:
        return Y, X
    elif Zone == 2:
        return -Y, X
    elif Zone == 3:
        return -X, Y
    elif Zone == 4:
        return -X, -Y
    elif Zone == 5:
        return -Y, -X
    elif Zone == 6:
        return Y, -X
    elif Zone == 7:
        return X, -Y

def WritePixel(x1, y1, x2, y2):
    Zone = FindZone(x1, y1, x2, y2)
    m1, n1 = Convert_Back(Zone, x1, y1) #point 1
    m2, n2 = Convert_Back(Zone, x2, y2) #point 2
    DrawLine(Zone, m1, n1, m2, n2)

def Show_pixel(num):
    for i in digit:
        if i == int(num[-2]):
            for j in digit[i]:
                WritePixel(j[0], j[1], j[2], j[3])
        if i == int(num[-1]):
            for j in digit[i]:
                WritePixel(j[0]+80, j[1], j[2]+80, j[3])

###################

def iterate():
    glViewport(0, 0, 500, 500)
    glMatrixMode(GL_PROJECTION)
    glLoadIdentity()
    glOrtho(0.0, 500, 0.0, 500, 0.0, 1.0)
    glMatrixMode (GL_MODELVIEW)
    glLoadIdentity()
def showScreen():
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
    glLoadIdentity()
    iterate()
    glColor3f(1.0, 1.0, 1.0) #konokichur color set (RGB)
    #call the draw methods here
    Show_pixel(input("Student Id: "))
    glutSwapBuffers()

glutInit()
glutInitDisplayMode(GLUT_RGBA)
glutInitWindowSize(500, 500) #window size
glutInitWindowPosition(0, 0)
wind = glutCreateWindow(b"Lab02 Task") #window name
glutDisplayFunc(showScreen)

glutMainLoop()
